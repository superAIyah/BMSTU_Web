{"ast":null,"code":"import Cookies from 'js-cookie';\nimport axios from 'axios';\nimport { load_user } from './profile';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL } from './types';\nexport const checkAuthenticated = () => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  };\n  try {\n    const res = await axios.get(\"/api/authenticated\", config);\n    if (res.data.error || res.data.isAuthenticated === 'error') {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n        payload: false\n      });\n    } else if (res.data.isAuthenticated === 'success') {\n      dispatch({\n        type: AUTHENTICATED_SUCCESS,\n        payload: true\n      });\n    } else {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n        payload: false\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: AUTHENTICATED_FAIL,\n      payload: false\n    });\n  }\n};\nexport const login = (username, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  console.log(body);\n  try {\n    const res = await axios.post(\"/api/login/\", body, config);\n    if (res.data.success) {\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n      dispatch(load_user());\n    } else {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  const body = JSON.stringify({\n    'withCredentials': true\n  });\n  try {\n    const res = await axios.post(\"api/logout/\", body, config);\n    if (res.data.success) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGOUT_FAIL\n    });\n  }\n};\nexport const register = (username, password, re_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'X-CSRFToken': Cookies.get('csrftoken')\n    }\n  };\n  console.log(config);\n  const body = JSON.stringify({\n    username,\n    password,\n    re_password\n  });\n  console.log(body);\n  try {\n    const res = await axios.post(\"/api/register/\", body, config);\n    console.log(res.data);\n    if (res.data.error) {\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    } else {\n      dispatch({\n        type: REGISTER_SUCCESS\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"names":["Cookies","axios","load_user","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","checkAuthenticated","dispatch","config","headers","res","get","data","error","isAuthenticated","type","payload","err","login","username","password","body","JSON","stringify","console","log","post","success","logout","register","re_password"],"sources":["/home/fedor/Desktop/Univercie/5 сем/рип/frontend/my-app/src/actions/auth.js"],"sourcesContent":["import Cookies from 'js-cookie';\nimport axios from 'axios';\nimport { load_user } from './profile';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    LOGOUT_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n} from './types';\n\nexport const checkAuthenticated = () => async dispatch => {\n    const config = {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    };\n\n    try {\n        const res = await axios.get(\"/api/authenticated\", config);\n\n        if (res.data.error || res.data.isAuthenticated === 'error') {\n            dispatch({\n                type: AUTHENTICATED_FAIL,\n                payload: false\n            });\n        }\n        else if (res.data.isAuthenticated === 'success') {\n            dispatch({\n                type: AUTHENTICATED_SUCCESS,\n                payload: true\n            });\n        }\n        else {\n            dispatch({\n                type: AUTHENTICATED_FAIL,\n                payload: false\n            });\n        }\n    } catch(err) {\n        dispatch({\n            type: AUTHENTICATED_FAIL,\n            payload: false\n        });\n    }\n};\n\nexport const login = (username, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'X-CSRFToken': Cookies.get('csrftoken')\n        }\n    };\n\n    const body = JSON.stringify({ username, password });\n    console.log(body)\n\n    try {\n        const res = await axios.post(\"/api/login/\", body, config);\n\n        if (res.data.success) {\n            dispatch({\n                type: LOGIN_SUCCESS\n            });\n\n            dispatch(load_user());\n        } else {\n            dispatch({\n                type: LOGIN_FAIL\n            });\n        }\n    } catch(err) {\n        dispatch({\n            type: LOGIN_FAIL\n        });\n    }\n};\n\nexport const logout = () => async dispatch => {\n    const config = {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'X-CSRFToken': Cookies.get('csrftoken')\n        }\n    };\n\n    const body = JSON.stringify({\n        'withCredentials': true\n    });\n\n    try {\n        const res = await axios.post(\"api/logout/\", body, config);\n\n        if (res.data.success) {\n            dispatch({\n                type: LOGOUT_SUCCESS\n            });\n        } else {\n            dispatch({\n                type: LOGOUT_FAIL\n            });\n        }\n    } catch(err) {\n        dispatch({\n            type: LOGOUT_FAIL\n        });\n    }\n};\n\nexport const register = (username, password, re_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'X-CSRFToken': Cookies.get('csrftoken')\n        }\n    };\n    console.log(config)\n    const body = JSON.stringify({ username, password, re_password });\n    console.log(body);\n    try {\n        const res = await axios.post(\"/api/register/\", body, config);\n        console.log(res.data)\n        if (res.data.error) {\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        } else {\n            dispatch({\n                type: REGISTER_SUCCESS\n            });\n        }\n    } catch (err) {\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}